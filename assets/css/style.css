/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0;
}

/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
figcaption,
figure {
  display: block;
}

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
 * Add the correct display in IE.
 */
main {
  display: block;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Links
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Show the overflow in IE.
 */
button {
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
  /* 2 */
}

button,
[type=button],
[type=reset],
[type=submit] {
  /**
   * Remove the inner border and padding in Firefox.
   */
  /**
   * Restore the focus styles unset by the previous rule.
   */
}
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Show the overflow in Edge.
 */
input {
  overflow: visible;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type=checkbox],
[type=radio] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type=search] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
   * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
   */
}
[type=search]::-webkit-search-cancel-button, [type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */
}

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto;
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE, and Firefox.
 */
details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/*
 * Add the correct display in IE 9-.
 */
menu {
  display: block;
}

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block;
}

/**
 * Add the correct display in IE.
 */
template {
  display: none;
}

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none;
}

*,
*::before,
*::after {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

html {
  font-size: 12px;
  font-family: verdana, arial, sans-serif;
  overflow-y: scroll;
}

body {
  background-color: #858585;
  background-image: url(../img/background.jpg);
  background-position: 50% 0;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.wrapper {
  max-width: 850px;
  padding: 0 15px;
  -webkit-box-flex: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
}

a {
  text-decoration: none;
  color: #efefef;
}

li {
  list-style-type: none;
  line-height: 1.5rem;
  color: #858585;
}

h2 {
  margin: 10px 0 10px 0;
  color: #0b81be;
  font-size: 2rem;
  font-weight: normal;
}

h3 {
  margin: 15px 0 15px 0;
  text-transform: uppercase;
  color: #efefef;
}

p {
  color: #858585;
  line-height: 1.75rem;
}

.container {
  margin-bottom: 50px;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
  display: grid;
}

.header {
  display: grid;
  grid-template-columns: auto 1fr;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  margin: 34px 0 34px 0;
}

.menu {
  position: relative;
}
.menu__list {
  margin: 0;
  min-height: 40px;
  display: grid;
  gap: 7px;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: end;
      -ms-flex-pack: end;
          justify-content: end;
  grid-template-columns: repeat(auto-fit, minmax(50px, -webkit-max-content));
  grid-template-columns: repeat(auto-fit, minmax(50px, max-content));
}
.menu__list .active {
  z-index: 1;
  visibility: visible;
  opacity: 1;
}
.menu__list .active .menu__list-item {
  width: 100%;
  margin: 0;
  text-align: center;
}
.menu__list .active .menu__list-item a {
  width: 100%;
  padding: 15px;
  border-radius: 0;
}
.menu__list-item a {
  text-transform: uppercase;
  border-radius: 15px;
  padding: 13px 15px 13.5px 15px;
}
.menu__list-item a:hover, .menu__list-item a:focus {
  background-color: rgba(239, 239, 239, 0.3);
}
.menu__list-item.active a {
  background: -webkit-gradient(linear, left top, left bottom, from(#0f8bbe), color-stop(50%, #2989d8), color-stop(51%, #207cca), to(#0eb7fe));
  background: -o-linear-gradient(top, #0f8bbe 0%, #2989d8 50%, #207cca 51%, #0eb7fe 100%);
  background: linear-gradient(to bottom, #0f8bbe 0%, #2989d8 50%, #207cca 51%, #0eb7fe 100%);
}

.menu__btn {
  position: relative;
}
.menu__btn-container {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  width: 50px;
  height: 50px;
  cursor: pointer;
  background-color: rgba(0, 0, 0, 0.25);
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  position: absolute;
  right: 0;
  bottom: -25px;
}
.menu__btn-row {
  position: relative;
  width: 60%;
  height: 2px;
  margin: 2px 0;
  -webkit-transition: all 0.8s;
  -o-transition: all 0.8s;
  transition: all 0.8s;
  background-color: #ffffff;
}
.menu__btn.active .menu__btn-row:first-of-type {
  top: 6px;
  -webkit-transform: rotate(-135deg);
      -ms-transform: rotate(-135deg);
          transform: rotate(-135deg);
}
.menu__btn.active .menu__btn-row:last-of-type {
  top: -6px;
  -webkit-transform: rotate(-225deg);
      -ms-transform: rotate(-225deg);
          transform: rotate(-225deg);
}
.menu__btn.active .menu__btn-row:nth-of-type(2) {
  opacity: 0;
}

.main {
  background-color: #efefef;
  grid-area: m;
  padding: 0 20px 15px 15px;
  position: relative;
}
.main::before {
  content: "";
  height: 90%;
  border-left: 1px solid #dddd;
  position: absolute;
  top: 15px;
  left: -1px;
}
.main p {
  text-align: justify;
}
.main p span {
  font-style: italic;
  color: black;
}

.carousel {
  background-color: #efefef;
  grid-area: c;
  position: relative;
  padding: 15px;
  background-color: #efefef;
  -webkit-box-ordinal-group: 2;
      -ms-flex-order: 1;
          order: 1;
}

.carousel-slides {
  position: relative;
}

.carousel-slide {
  position: absolute;
  top: 0;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-transition: opacity 0.5s;
  -o-transition: opacity 0.5s;
  transition: opacity 0.5s;
  opacity: 0;
  border: 7px solid #ffffff;
  background-image: url(../img/carousel-item-bg.png);
  background-position: 50% 50%;
  background-size: cover;
  -webkit-box-shadow: 0 0 1px #dddddd;
          box-shadow: 0 0 1px #dddddd;
}
.carousel-slide.active {
  position: relative;
  z-index: 1;
  opacity: 1;
}

.carousel-slide__image {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  padding: 15px;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}
.carousel-slide__image img {
  max-width: 100%;
}
.carousel-slide__text h3 {
  text-transform: uppercase;
  font-size: 2rem;
  font-weight: normal;
  color: #ffffff;
}
.carousel-slide__text p {
  color: #ffffff;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 4;
  overflow: hidden;
  max-height: 70px;
  font-size: 1rem;
  line-height: 1.5;
}

.carousel-control {
  position: absolute;
  z-index: 2;
  top: 50%;
}
.carousel-control img {
  margin-top: -15px;
}
.carousel-control.prev {
  left: 3px;
}
.carousel-control.next {
  right: 3px;
  -webkit-transform: scale(-1, 1);
      -ms-transform: scale(-1, 1);
          transform: scale(-1, 1);
}

.left-sidebar {
  background-color: #efefef;
  grid-area: l;
  padding: 0 15px 15px 20px;
}
.left-sidebar ul {
  padding-left: 20px;
}
.left-sidebar li {
  position: relative;
  padding: 7.5px;
}
.left-sidebar li::before {
  content: url(../img/main-list-arrow.png);
  position: absolute;
  left: -7.5px;
}
.left-sidebar span {
  font-style: italic;
  line-height: 1.5rem;
  position: relative;
}
.left-sidebar span::before {
  content: "";
  position: absolute;
  width: 100%;
  border-bottom: 1px solid #dddd;
  bottom: -10px;
}

.bottom-sidebar {
  background-color: #efefef;
  grid-area: b;
  padding: 15px;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  position: relative;
}
.bottom-sidebar::before {
  content: "";
  position: absolute;
  height: calc(100% - 28px);
  width: calc(100% - 28px);
  border: 1px solid #dddd;
  top: 14px;
  left: 14px;
}
.bottom-sidebar__left {
  background-color: #ffff;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  padding: 20px 15px 20px 15px;
  -webkit-box-align: start;
      -ms-flex-align: start;
          align-items: flex-start;
  border-left: 5px solid #ffff;
  border-bottom: 5px solid #ffff;
  border-top: 5px solid #ffff;
  background: -webkit-gradient(linear, left top, left bottom, from(#ffffff), color-stop(50%, #f5f5f5), to(#eeeeee));
  background: -o-linear-gradient(top, #ffffff 0%, #f5f5f5 50%, #eeeeee 100%);
  background: linear-gradient(to bottom, #ffffff 0%, #f5f5f5 50%, #eeeeee 100%);
}
.bottom-sidebar__right {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  background-color: #ffff;
  padding: 20px 15px 20px 15px;
  -webkit-box-align: start;
      -ms-flex-align: start;
          align-items: flex-start;
  border-right: 5px solid #ffff;
  border-bottom: 5px solid #ffff;
  border-top: 5px solid #ffff;
  position: relative;
  background: -webkit-gradient(linear, left top, left bottom, from(#ffffff), color-stop(50%, #f5f5f5), to(#eeeeee));
  background: -o-linear-gradient(top, #ffffff 0%, #f5f5f5 50%, #eeeeee 100%);
  background: linear-gradient(to bottom, #ffffff 0%, #f5f5f5 50%, #eeeeee 100%);
}
.bottom-sidebar__right::before {
  content: "";
  height: 100%;
  border-left: 1px solid #dddd;
  position: absolute;
  top: 0px;
  left: -1px;
}
.bottom-sidebar p {
  margin-top: 0;
  line-height: 1.5rem;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}
.bottom-sidebar img {
  padding: 0 15px 15px 0;
  border-style: none;
}

.footer {
  background-color: rgba(0, 0, 0, 0.4);
  width: 100%;
}
.footer .wrapper {
  margin: 37px auto 0 auto;
  display: grid;
}
.footer-left {
  grid-area: l;
}
.footer-right {
  grid-area: r;
}
.footer-right .copyright {
  margin: 57px 0 15px 15px;
  color: #ffff;
  padding-right: 15px;
}
.footer-right .footer-logo {
  padding-right: 15px;
}
.footer-right .menu__list {
  padding-left: 0;
}
.footer-right .menu__list-item a {
  font-size: 0.9rem;
  padding: 12px 15px 12px 15px;
}

.twitter {
  display: grid;
  grid-template-areas: "i d" "p p";
  grid-template-columns: 55px 1fr;
}
.twitter__image {
  grid-area: i;
}
.twitter__description {
  grid-area: d;
}
.twitter__description-title {
  color: #ffff;
  font-size: 2rem;
  line-height: 2.3rem;
}
.twitter__description-slogan {
  color: #727272;
}
.twitter__post {
  grid-area: p;
  padding: 20px;
  margin: 12px 30px 30px 37px;
  background-color: rgba(0, 0, 0, 0.4);
  border-radius: 10px;
  position: relative;
}
.twitter__post-text {
  line-height: 1.5rem;
}
.twitter__post-date {
  color: #0b81be;
  font-style: italic;
  font-size: 0.83rem;
}
.twitter__post::before {
  content: url(../img/twitter-speech-bubble.png);
  position: absolute;
  left: 0px;
  top: -19px;
}
@media (min-width: 769px) {
  .container {
    grid-template-areas: "c c" "l m" "b b";
    grid-template-columns: 300px 1fr;
  }
  .carousel-slide__text {
    padding: 15px 30px 15px 15px;
    -webkit-box-flex: 1;
        -ms-flex-positive: 1;
            flex-grow: 1;
  }
  .carousel-slide__text h3 {
    margin: 15px 0;
    -webkit-box-flex: 1;
        -ms-flex-positive: 1;
            flex-grow: 1;
  }
  .carousel-slide__text p {
    margin-bottom: 15px;
    text-align: justify;
    -webkit-box-flex: 1;
        -ms-flex-positive: 1;
            flex-grow: 1;
  }
  .footer-right .copyright {
    text-align: end;
  }
  .footer-right .footer-logo {
    text-align: end;
  }
}
@media (min-width: 851px) {
  .menu__btn-container {
    display: none;
  }
  .carousel-slide__image {
    -webkit-box-flex: 0;
        -ms-flex: 0 0 250px;
            flex: 0 0 250px;
  }
  .footer .wrapper {
    grid-template-areas: "l r";
    grid-template-columns: 330px 1fr;
  }
}
@media (max-width: 850px) {
  .menu__list {
    display: none;
  }
  .menu__btn-container {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
  }
}
@media (max-width: 850px) and (min-width: 769px) {
  .carousel-slide__image {
    -webkit-box-flex: 0;
        -ms-flex: 0 0 220px;
            flex: 0 0 220px;
  }
  .footer .wrapper {
    grid-template-areas: "l r";
  }
}
@media (max-width: 768px) {
  .container {
    grid-template-areas: "c" "m" "l" "b";
    grid-template-columns: 1fr;
  }
  .carousel-slide {
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
  }
  .carousel-slide__image {
    -webkit-box-flex: 1;
        -ms-flex: 1 0 100%;
            flex: 1 0 100%;
    -webkit-box-pack: center;
        -ms-flex-pack: center;
            justify-content: center;
  }
  .carousel-slide__text {
    -webkit-box-flex: 1;
        -ms-flex: 1 0 100%;
            flex: 1 0 100%;
    padding: 0 15px 15px 15px;
  }
  .carousel-slide__text h3 {
    overflow: hidden;
    -webkit-box-flex: 1;
        -ms-flex: 1 0 100%;
            flex: 1 0 100%;
    max-width: calc(100vw - 135px);
    margin: 0 0 15px 0;
    text-align: center;
    white-space: nowrap;
    -o-text-overflow: ellipsis;
       text-overflow: ellipsis;
  }
  .carousel-slide__text p {
    margin: 0 0 15px 0;
    margin-bottom: 0;
    text-align: center;
  }
  .footer .wrapper {
    grid-template-areas: "l" "r";
    grid-template-columns: 1fr;
  }
  .footer-right .copyright {
    text-align: center;
  }
  .footer-right .footer-logo {
    text-align: center;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */